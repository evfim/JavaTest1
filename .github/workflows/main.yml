name: CI

on:
  workflow_dispatch:
  #push:
  #  branches: [ main ]

jobs:
  secret_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: channelbeta/secret-scan@2.1.0
        with:
          exclude_path: './path_exclude/exclude.txt'

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Maven
        run: |
          sudo apt install maven
          mvn clean package -DskipTests
      - name: Build docker-compose
        run: docker-compose -f docker-compose.yml up --build -d

      - name: Upload WAR Artifact
        uses: actions/upload-artifact@v2
        with:
          name: CRMMVC.war
          path: ./target/CRMMVC.war
          
  sca:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Microsoft Application Inspector Scan
        uses: microsoft/ApplicationInspector-Action@v1
      - uses: actions/upload-artifact@v2
        with:
          name: AppInspectorResults
          path: AppInspectorResults.json

      - name: Run Maven Install
        run: |
          sudo apt install maven
          
      - name: Snyk Maven Dependencies Scan
        # You may pin to the exact commit or the version.
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          #command: code # optional, default is test
          # Additional arguments to pass to Snyk
          #args: --sarif-file-output=snyk.sarif # optional
          # Output a snyk.json file with results if running the test command
          json: true # optional

      - uses: actions/upload-artifact@v2
        with:
         name: snyk-sca
         path: snyk.json

  sast:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #- name: Install dependencies
      #  run: yarn install --production=false
      #- name: Scan code
      #  uses: vtex/action-sonarqube@main
      #  with:
      #    githubToken: ${{ secrets.GITHUB_TOKEN }} # https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
      #    host: ${{ secrets.SQHost }} # Variable set in the Github Secrets
      #    token: ${{ secrets.SQToken }} # Variable set in the Github Secrets

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: java

      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
      - uses: actions/upload-artifact@v2
        with:
          name: codeql_database
          path: /home/runner/work/_temp/codeql_databases/java.zip
          
      - name: Run Maven Install
        run: |
          sudo apt install maven
          
      - name: Snyk Code Scan
        # You may pin to the exact commit or the version.
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test # optional, default is test
          # Additional arguments to pass to Snyk
          args: --sarif-file-output=snyk.sarif # optional
          # Output a snyk.json file with results if running the test command
          json: true # optional
          
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif
          
      - uses: actions/upload-artifact@v3
        with:
          name: snyk-sast
          path: snyk.json
          
  unit_testing:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Maven
        run: |
          sudo apt install maven
      - name: Run Maven JUnit Testing
        run: |
          mvn test

  functional_testing:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download WAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: CRMMVC.war
          path: ./target/

      - name: Build Image for testing
        run: docker-compose -f docker-compose.yml up --build -d

      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
           python-version: "3.6"

      - name: Install dependencies
        run: |
           python -m pip install --upgrade pip
           pip install -r test/requirement.txt
           
      - name: Run Landing and Login page render test
        run: python test/landing_page_test.py

      - name: Run functional login test
        run: python test/functional_test_login.py
      
  image_scan:
    needs: [sca, sast, unit_testing, functional_testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Download WAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: CRMMVC.war
          path: ./target/
          
      - name: Build docker-compose
        run: docker-compose -f docker-compose.yml up --build -d
        
      - name: Run App Container Scan
        uses: erzz/dockle-action@v1.1.1
        #uses: hands-lab/dockle-action@v1
        with:
          image: 2022-group3-crmmvc_app
          report-format: json
          report-name: dockle-app
          
      - name: Run DB Container Scan
        uses: erzz/dockle-action@v1.1.1
        #uses: hands-lab/dockle-action@v1
        with:
          image: 2022-group3-crmmvc_db
          report-format: json
          report-name: dockle-db
          
      - name: Upload Container Scan Logs
        uses: actions/upload-artifact@v2
        with:
          name: Dockle Reports
          path: |
            dockle-app.json
            dockle-db.json
          
  deployment: 
    needs: image_scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
    
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download WAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: CRMMVC.war
          path: ./target/

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: bluekatkirbyfi/2022-java-web-app:latest

  dast:
    needs: deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download WAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: CRMMVC.war
          path: ./target/

      - name: Build docker-compose
        run: docker-compose -f docker-compose.yml up --build -d

      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
           python-version: "3.6"

      - name: Install dependencies
        run: |
           python -m pip install --upgrade pip
           pip install -r test/requirement.txt

      - name: ZAP Scan
        run: |
          mkdir -p logs/
          sudo docker run --net=default_network -t owasp/zap2docker-stable zap-baseline.py -t http://app:8080/ > logs/owasp.log || true
          
      - uses: actions/upload-artifact@v2
        with:
             name: owaspzap
             path: logs/owasp.log
        
